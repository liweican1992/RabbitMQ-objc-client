@interface <%= class_name %> ()
<%- fields.each do |f| -%>
@property (<%= f[:base_property_options].join(", ") %>, readwrite) <%= f[:pointer_type] %><%= f[:name] %>;
<%- end -%>
@property (nonatomic, readwrite) NSArray *payloadArguments;
@property (nonatomic, readwrite) BOOL hasContent;
@end

@implementation <%= class_name %>

+ (NSArray *)propertyClasses {
    return @[<%= fields.map {|f| f[:decode_object]}.join(",\n#{' ' * '    return @['.size}") -%>];
}
- (NSNumber *)classID       { return @<%= class_id %>; }
- (NSNumber *)methodID      { return @<%= method_id %>; }
- (Class)syncResponse       { return <%= response_name ? "[#{response_name} class]" : "nil" %>; }
- (NSNumber *)frameTypeID   { return @1; }
- (BOOL)hasContent          { return <%= has_content_value %>; }

<%- if constructor -%>
<%= constructor %> {
    self = [super init];
    if (self) {
        <%- fields.each do |f| -%>
        self.<%= f[:name] %> = <%= f[:name] %>;
        <%- end -%>
        self.payloadArguments = @[<%= fields.map {|f| f[:payload_argument]}.join(",\n                                  ") -%>];
    }
    return self;
}
<%- end -%>

- (instancetype)initWithDecodedFrame:(NSArray *)frame {
    self = [super init];
    if (self) {
      <%- fields.each_with_index do |f, idx| -%>
        self.<%= f[:name] %> = ((<%= f[:decode_type] %>)frame[<%= idx %>])<%= f[:decode_property_call] %>;
      <%- end -%>
        self.payloadArguments = @[<%= fields.map {|f| f[:payload_argument]}.join(",\n                                  ") -%>];
    }
    return self;
}

- (NSData *)amqEncoded {
    NSMutableData *encoded = [NSMutableData new];
    [encoded appendData:[[RMQShort alloc] init:self.classID.integerValue].amqEncoded];
    [encoded appendData:[[RMQShort alloc] init:self.methodID.integerValue].amqEncoded];
    for (id<RMQEncodable>arg in self.payloadArguments) {
        [encoded appendData:arg.amqEncoded];
    }
    return encoded;
}

@end

